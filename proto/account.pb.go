// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/account.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 登陆方式
type ELoginType int32

const (
	// 账号
	ELoginType_ACCOUNT ELoginType = 0
	// 手机号
	ELoginType_PHONE ELoginType = 1
	// 微信
	ELoginType_WECHAT ELoginType = 2
	// qq
	ELoginType_QQ ELoginType = 3
)

var ELoginType_name = map[int32]string{
	0: "ACCOUNT",
	1: "PHONE",
	2: "WECHAT",
	3: "QQ",
}
var ELoginType_value = map[string]int32{
	"ACCOUNT": 0,
	"PHONE":   1,
	"WECHAT":  2,
	"QQ":      3,
}

func (x ELoginType) String() string {
	return proto.EnumName(ELoginType_name, int32(x))
}
func (ELoginType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{0}
}

// 登陆方式
type Os int32

const (
	Os_ANDROID Os = 0
	Os_IOS     Os = 1
	Os_WEB     Os = 2
)

var Os_name = map[int32]string{
	0: "ANDROID",
	1: "IOS",
	2: "WEB",
}
var Os_value = map[string]int32{
	"ANDROID": 0,
	"IOS":     1,
	"WEB":     2,
}

func (x Os) String() string {
	return proto.EnumName(Os_name, int32(x))
}
func (Os) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{1}
}

// 验证码类型,与sms.CodeType对应
type PSmsDataCodeType int32

const (
	// 快捷登陆
	PSmsData_quick_login PSmsDataCodeType = 0
	// 重置密码
	PSmsData_reset_pass PSmsDataCodeType = 2
	// 注册
	PSmsData_reg PSmsDataCodeType = 1
	// 手机号绑定
	PSmsData_bind PSmsDataCodeType = 3
)

var PSmsDataCodeType_name = map[int32]string{
	0: "quick_login",
	2: "reset_pass",
	1: "reg",
	3: "bind",
}
var PSmsDataCodeType_value = map[string]int32{
	"quick_login": 0,
	"reset_pass":  2,
	"reg":         1,
	"bind":        3,
}

func (x PSmsDataCodeType) String() string {
	return proto.EnumName(PSmsDataCodeType_name, int32(x))
}
func (PSmsDataCodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{8, 0}
}

type PUser struct {
	// 用户id
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 登陆账号
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// 手机号
	// 用户名/昵称
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 手机号
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// 邮箱
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// 性别: 0未设置,1男,2女
	Gender int32 `protobuf:"varint,6,opt,name=gender,proto3" json:"gender,omitempty"`
	// 学校id
	SchoolId int32 `protobuf:"varint,7,opt,name=school_id,json=schoolId,proto3" json:"school_id,omitempty"`
	// 班级id
	ClassId int32 `protobuf:"varint,8,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	// 区域id
	AreaId int32 `protobuf:"varint,9,opt,name=area_id,json=areaId,proto3" json:"area_id,omitempty"`
	// 认证状态
	IdentityStatus int32 `protobuf:"varint,10,opt,name=identity_status,json=identityStatus,proto3" json:"identity_status,omitempty"`
	// 注册时间
	Created              int32    `protobuf:"varint,11,opt,name=created,proto3" json:"created,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PUser) Reset()         { *m = PUser{} }
func (m *PUser) String() string { return proto.CompactTextString(m) }
func (*PUser) ProtoMessage()    {}
func (*PUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{0}
}
func (m *PUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PUser.Unmarshal(m, b)
}
func (m *PUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PUser.Marshal(b, m, deterministic)
}
func (dst *PUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PUser.Merge(dst, src)
}
func (m *PUser) XXX_Size() int {
	return xxx_messageInfo_PUser.Size(m)
}
func (m *PUser) XXX_DiscardUnknown() {
	xxx_messageInfo_PUser.DiscardUnknown(m)
}

var xxx_messageInfo_PUser proto.InternalMessageInfo

func (m *PUser) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PUser) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PUser) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PUser) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *PUser) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *PUser) GetSchoolId() int32 {
	if m != nil {
		return m.SchoolId
	}
	return 0
}

func (m *PUser) GetClassId() int32 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *PUser) GetAreaId() int32 {
	if m != nil {
		return m.AreaId
	}
	return 0
}

func (m *PUser) GetIdentityStatus() int32 {
	if m != nil {
		return m.IdentityStatus
	}
	return 0
}

func (m *PUser) GetCreated() int32 {
	if m != nil {
		return m.Created
	}
	return 0
}

// app客户端设备信息
type PDevice struct {
	// 设备IMEI,唯一识别码
	Imei string `protobuf:"bytes,1,opt,name=imei,proto3" json:"imei,omitempty"`
	// 操作系统类型:ios,android,web
	Os Os `protobuf:"varint,2,opt,name=os,proto3,enum=proto.Os" json:"os,omitempty"`
	// 操作系统版本
	OsVersion string `protobuf:"bytes,3,opt,name=osVersion,proto3" json:"osVersion,omitempty"`
	// 设备型号，如iPhone 6s
	Model                string   `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PDevice) Reset()         { *m = PDevice{} }
func (m *PDevice) String() string { return proto.CompactTextString(m) }
func (*PDevice) ProtoMessage()    {}
func (*PDevice) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{1}
}
func (m *PDevice) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PDevice.Unmarshal(m, b)
}
func (m *PDevice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PDevice.Marshal(b, m, deterministic)
}
func (dst *PDevice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PDevice.Merge(dst, src)
}
func (m *PDevice) XXX_Size() int {
	return xxx_messageInfo_PDevice.Size(m)
}
func (m *PDevice) XXX_DiscardUnknown() {
	xxx_messageInfo_PDevice.DiscardUnknown(m)
}

var xxx_messageInfo_PDevice proto.InternalMessageInfo

func (m *PDevice) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *PDevice) GetOs() Os {
	if m != nil {
		return m.Os
	}
	return Os_ANDROID
}

func (m *PDevice) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *PDevice) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

// 登陆所需结构
type PLoginData struct {
	// 登陆方式
	LoginType ELoginType `protobuf:"varint,1,opt,name=login_type,json=loginType,proto3,enum=proto.ELoginType" json:"login_type,omitempty"`
	// 设备信息
	Device *PDevice `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// 手机号
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// 验证码
	VerifyCode string `protobuf:"bytes,4,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	// 账号
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// 密码,已使用rsa加密
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// qq登陆openid
	QqOpenid string `protobuf:"bytes,8,opt,name=qq_openid,json=qqOpenid,proto3" json:"qq_openid,omitempty"`
	// qq登陆access_token
	QqAccessToken string `protobuf:"bytes,9,opt,name=qq_access_token,json=qqAccessToken,proto3" json:"qq_access_token,omitempty"`
	// 微信登陆code
	WxCode               string   `protobuf:"bytes,10,opt,name=wx_code,json=wxCode,proto3" json:"wx_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PLoginData) Reset()         { *m = PLoginData{} }
func (m *PLoginData) String() string { return proto.CompactTextString(m) }
func (*PLoginData) ProtoMessage()    {}
func (*PLoginData) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{2}
}
func (m *PLoginData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PLoginData.Unmarshal(m, b)
}
func (m *PLoginData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PLoginData.Marshal(b, m, deterministic)
}
func (dst *PLoginData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PLoginData.Merge(dst, src)
}
func (m *PLoginData) XXX_Size() int {
	return xxx_messageInfo_PLoginData.Size(m)
}
func (m *PLoginData) XXX_DiscardUnknown() {
	xxx_messageInfo_PLoginData.DiscardUnknown(m)
}

var xxx_messageInfo_PLoginData proto.InternalMessageInfo

func (m *PLoginData) GetLoginType() ELoginType {
	if m != nil {
		return m.LoginType
	}
	return ELoginType_ACCOUNT
}

func (m *PLoginData) GetDevice() *PDevice {
	if m != nil {
		return m.Device
	}
	return nil
}

func (m *PLoginData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PLoginData) GetVerifyCode() string {
	if m != nil {
		return m.VerifyCode
	}
	return ""
}

func (m *PLoginData) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PLoginData) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *PLoginData) GetQqOpenid() string {
	if m != nil {
		return m.QqOpenid
	}
	return ""
}

func (m *PLoginData) GetQqAccessToken() string {
	if m != nil {
		return m.QqAccessToken
	}
	return ""
}

func (m *PLoginData) GetWxCode() string {
	if m != nil {
		return m.WxCode
	}
	return ""
}

// 用户及jwt token信息
// 登陆及注册下使用
type PUserAndToken struct {
	// 用户信息
	User *PUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// jwt token信息
	Token                string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PUserAndToken) Reset()         { *m = PUserAndToken{} }
func (m *PUserAndToken) String() string { return proto.CompactTextString(m) }
func (*PUserAndToken) ProtoMessage()    {}
func (*PUserAndToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{3}
}
func (m *PUserAndToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PUserAndToken.Unmarshal(m, b)
}
func (m *PUserAndToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PUserAndToken.Marshal(b, m, deterministic)
}
func (dst *PUserAndToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PUserAndToken.Merge(dst, src)
}
func (m *PUserAndToken) XXX_Size() int {
	return xxx_messageInfo_PUserAndToken.Size(m)
}
func (m *PUserAndToken) XXX_DiscardUnknown() {
	xxx_messageInfo_PUserAndToken.DiscardUnknown(m)
}

var xxx_messageInfo_PUserAndToken proto.InternalMessageInfo

func (m *PUserAndToken) GetUser() *PUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *PUserAndToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

// 登陆所需结构
type PRegData struct {
	// 手机号
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	// 验证码
	VerifyCode string `protobuf:"bytes,2,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	// 账号
	Account string `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	// 密码,已使用rsa加密
	Password             string   `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PRegData) Reset()         { *m = PRegData{} }
func (m *PRegData) String() string { return proto.CompactTextString(m) }
func (*PRegData) ProtoMessage()    {}
func (*PRegData) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{4}
}
func (m *PRegData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PRegData.Unmarshal(m, b)
}
func (m *PRegData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PRegData.Marshal(b, m, deterministic)
}
func (dst *PRegData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PRegData.Merge(dst, src)
}
func (m *PRegData) XXX_Size() int {
	return xxx_messageInfo_PRegData.Size(m)
}
func (m *PRegData) XXX_DiscardUnknown() {
	xxx_messageInfo_PRegData.DiscardUnknown(m)
}

var xxx_messageInfo_PRegData proto.InternalMessageInfo

func (m *PRegData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PRegData) GetVerifyCode() string {
	if m != nil {
		return m.VerifyCode
	}
	return ""
}

func (m *PRegData) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PRegData) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

// 绑定账号所需结构
type PBindData struct {
	// 需要Authorization信息
	// 登陆方式
	BindType ELoginType `protobuf:"varint,2,opt,name=bind_type,json=bindType,proto3,enum=proto.ELoginType" json:"bind_type,omitempty"`
	// 手机号
	Phone string `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
	// 验证码
	VerifyCode string `protobuf:"bytes,4,opt,name=verify_code,json=verifyCode,proto3" json:"verify_code,omitempty"`
	// 账号
	Account string `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// 密码,已使用rsa加密
	Password string `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
	// qq登陆openid
	QqOpenid string `protobuf:"bytes,8,opt,name=qq_openid,json=qqOpenid,proto3" json:"qq_openid,omitempty"`
	// qq登陆access_token
	QqAccessToken string `protobuf:"bytes,9,opt,name=qq_access_token,json=qqAccessToken,proto3" json:"qq_access_token,omitempty"`
	// 微信登陆code
	WxCode               string   `protobuf:"bytes,10,opt,name=wx_code,json=wxCode,proto3" json:"wx_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PBindData) Reset()         { *m = PBindData{} }
func (m *PBindData) String() string { return proto.CompactTextString(m) }
func (*PBindData) ProtoMessage()    {}
func (*PBindData) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{5}
}
func (m *PBindData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PBindData.Unmarshal(m, b)
}
func (m *PBindData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PBindData.Marshal(b, m, deterministic)
}
func (dst *PBindData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PBindData.Merge(dst, src)
}
func (m *PBindData) XXX_Size() int {
	return xxx_messageInfo_PBindData.Size(m)
}
func (m *PBindData) XXX_DiscardUnknown() {
	xxx_messageInfo_PBindData.DiscardUnknown(m)
}

var xxx_messageInfo_PBindData proto.InternalMessageInfo

func (m *PBindData) GetBindType() ELoginType {
	if m != nil {
		return m.BindType
	}
	return ELoginType_ACCOUNT
}

func (m *PBindData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PBindData) GetVerifyCode() string {
	if m != nil {
		return m.VerifyCode
	}
	return ""
}

func (m *PBindData) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PBindData) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *PBindData) GetQqOpenid() string {
	if m != nil {
		return m.QqOpenid
	}
	return ""
}

func (m *PBindData) GetQqAccessToken() string {
	if m != nil {
		return m.QqAccessToken
	}
	return ""
}

func (m *PBindData) GetWxCode() string {
	if m != nil {
		return m.WxCode
	}
	return ""
}

// 用户已绑定的登录方式信息
type PLoginBindInfo struct {
	// 用户名，没有则为空
	Account string `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
	// 手机号码，没有则为空
	Phone string `protobuf:"bytes,2,opt,name=Phone,proto3" json:"Phone,omitempty"`
	// 是否已绑定微信，绑定为true，未绑定为false
	Wechat bool `protobuf:"varint,3,opt,name=Wechat,proto3" json:"Wechat,omitempty"`
	// 是否已绑定QQ，绑定为true，未绑定为false
	QQ bool `protobuf:"varint,4,opt,name=QQ,proto3" json:"QQ,omitempty"`
	// 是否已绑定微博，绑定为true，未绑定为false
	WeiBo                bool     `protobuf:"varint,5,opt,name=WeiBo,proto3" json:"WeiBo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PLoginBindInfo) Reset()         { *m = PLoginBindInfo{} }
func (m *PLoginBindInfo) String() string { return proto.CompactTextString(m) }
func (*PLoginBindInfo) ProtoMessage()    {}
func (*PLoginBindInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{6}
}
func (m *PLoginBindInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PLoginBindInfo.Unmarshal(m, b)
}
func (m *PLoginBindInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PLoginBindInfo.Marshal(b, m, deterministic)
}
func (dst *PLoginBindInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PLoginBindInfo.Merge(dst, src)
}
func (m *PLoginBindInfo) XXX_Size() int {
	return xxx_messageInfo_PLoginBindInfo.Size(m)
}
func (m *PLoginBindInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PLoginBindInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PLoginBindInfo proto.InternalMessageInfo

func (m *PLoginBindInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *PLoginBindInfo) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PLoginBindInfo) GetWechat() bool {
	if m != nil {
		return m.Wechat
	}
	return false
}

func (m *PLoginBindInfo) GetQQ() bool {
	if m != nil {
		return m.QQ
	}
	return false
}

func (m *PLoginBindInfo) GetWeiBo() bool {
	if m != nil {
		return m.WeiBo
	}
	return false
}

type PLoginBindInfoList struct {
	List                 []*PLoginBindInfo `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PLoginBindInfoList) Reset()         { *m = PLoginBindInfoList{} }
func (m *PLoginBindInfoList) String() string { return proto.CompactTextString(m) }
func (*PLoginBindInfoList) ProtoMessage()    {}
func (*PLoginBindInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{7}
}
func (m *PLoginBindInfoList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PLoginBindInfoList.Unmarshal(m, b)
}
func (m *PLoginBindInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PLoginBindInfoList.Marshal(b, m, deterministic)
}
func (dst *PLoginBindInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PLoginBindInfoList.Merge(dst, src)
}
func (m *PLoginBindInfoList) XXX_Size() int {
	return xxx_messageInfo_PLoginBindInfoList.Size(m)
}
func (m *PLoginBindInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_PLoginBindInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_PLoginBindInfoList proto.InternalMessageInfo

func (m *PLoginBindInfoList) GetList() []*PLoginBindInfo {
	if m != nil {
		return m.List
	}
	return nil
}

// 发送验证码所需内容
type PSmsData struct {
	// 手机号
	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	// 设备号
	Imei string `protobuf:"bytes,2,opt,name=imei,proto3" json:"imei,omitempty"`
	// 验证码类型,与sms.CodeType对应
	CodeType             PSmsDataCodeType `protobuf:"varint,3,opt,name=code_type,json=codeType,proto3,enum=proto.PSmsDataCodeType" json:"code_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PSmsData) Reset()         { *m = PSmsData{} }
func (m *PSmsData) String() string { return proto.CompactTextString(m) }
func (*PSmsData) ProtoMessage()    {}
func (*PSmsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_account_919cef71916d18b0, []int{8}
}
func (m *PSmsData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PSmsData.Unmarshal(m, b)
}
func (m *PSmsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PSmsData.Marshal(b, m, deterministic)
}
func (dst *PSmsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PSmsData.Merge(dst, src)
}
func (m *PSmsData) XXX_Size() int {
	return xxx_messageInfo_PSmsData.Size(m)
}
func (m *PSmsData) XXX_DiscardUnknown() {
	xxx_messageInfo_PSmsData.DiscardUnknown(m)
}

var xxx_messageInfo_PSmsData proto.InternalMessageInfo

func (m *PSmsData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *PSmsData) GetImei() string {
	if m != nil {
		return m.Imei
	}
	return ""
}

func (m *PSmsData) GetCodeType() PSmsDataCodeType {
	if m != nil {
		return m.CodeType
	}
	return PSmsData_quick_login
}

func init() {
	proto.RegisterType((*PUser)(nil), "proto.PUser")
	proto.RegisterType((*PDevice)(nil), "proto.PDevice")
	proto.RegisterType((*PLoginData)(nil), "proto.PLoginData")
	proto.RegisterType((*PUserAndToken)(nil), "proto.PUserAndToken")
	proto.RegisterType((*PRegData)(nil), "proto.PRegData")
	proto.RegisterType((*PBindData)(nil), "proto.PBindData")
	proto.RegisterType((*PLoginBindInfo)(nil), "proto.PLoginBindInfo")
	proto.RegisterType((*PLoginBindInfoList)(nil), "proto.PLoginBindInfoList")
	proto.RegisterType((*PSmsData)(nil), "proto.PSmsData")
	proto.RegisterEnum("proto.ELoginType", ELoginType_name, ELoginType_value)
	proto.RegisterEnum("proto.Os", Os_name, Os_value)
	proto.RegisterEnum("proto.PSmsDataCodeType", PSmsDataCodeType_name, PSmsDataCodeType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Account service

type AccountClient interface {
	// 发送验证码(包含各种验证码,对应codeType)
	SendSmsVerifyCode(ctx context.Context, in *PSmsData, opts ...client.CallOption) (*PNoResponse, error)
	// 登陆(账号,手机号,qq,微信)
	Login(ctx context.Context, in *PLoginData, opts ...client.CallOption) (*PUserAndToken, error)
	// 注册信息(账号密码)
	Reg(ctx context.Context, in *PRegData, opts ...client.CallOption) (*PUserAndToken, error)
	// 绑定账号(账号,手机号,qq,微信)
	// -- 已经通过某种方式登陆
	Bind(ctx context.Context, in *PBindData, opts ...client.CallOption) (*PNoResponse, error)
	// 账号解绑(仅支持解绑第三方qq,微信),对应ELoginType
	Unbind(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error)
	// 设置账号名
	SetAccountName(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error)
	// 修改密码(通过原始密码)
	ChangePassword(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error)
	// 修改昵称
	ChangeNickname(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error)
	// 修改手机号
	ChangePhone(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error)
	// 设置密码(手机验证码登陆情况)
	SetPassword(ctx context.Context, in *PKeyValList, opts ...client.CallOption) (*PNoResponse, error)
	// 重置密码(通过原始密码重置密码)
	ResetPassword(ctx context.Context, in *PKeyValList, opts ...client.CallOption) (*PNoResponse, error)
	// 头像设置
	SetAvatar(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error)
	// 修改资料
	SaveProfile(ctx context.Context, in *PKeyValList, opts ...client.CallOption) (*PNoResponse, error)
	// 提交身份认证信息
	SubmitIdentity(ctx context.Context, in *PKeyValList, opts ...client.CallOption) (*PNoResponse, error)
	// 获取账号信息(需验证登陆情况)
	GetAccountInfo(ctx context.Context, in *PNoParam, opts ...client.CallOption) (*PUser, error)
	// 获取用户信息
	GetUserInfo(ctx context.Context, in *PInt32, opts ...client.CallOption) (*PUser, error)
}

type accountClient struct {
	c           client.Client
	serviceName string
}

func NewAccountClient(serviceName string, c client.Client) AccountClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "proto"
	}
	return &accountClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *accountClient) SendSmsVerifyCode(ctx context.Context, in *PSmsData, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.SendSmsVerifyCode", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Login(ctx context.Context, in *PLoginData, opts ...client.CallOption) (*PUserAndToken, error) {
	req := c.c.NewRequest(c.serviceName, "Account.Login", in)
	out := new(PUserAndToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Reg(ctx context.Context, in *PRegData, opts ...client.CallOption) (*PUserAndToken, error) {
	req := c.c.NewRequest(c.serviceName, "Account.Reg", in)
	out := new(PUserAndToken)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Bind(ctx context.Context, in *PBindData, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.Bind", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Unbind(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.Unbind", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) SetAccountName(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.SetAccountName", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ChangePassword(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.ChangePassword", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ChangeNickname(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.ChangeNickname", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ChangePhone(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.ChangePhone", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) SetPassword(ctx context.Context, in *PKeyValList, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.SetPassword", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ResetPassword(ctx context.Context, in *PKeyValList, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.ResetPassword", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) SetAvatar(ctx context.Context, in *PString, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.SetAvatar", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) SaveProfile(ctx context.Context, in *PKeyValList, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.SaveProfile", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) SubmitIdentity(ctx context.Context, in *PKeyValList, opts ...client.CallOption) (*PNoResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Account.SubmitIdentity", in)
	out := new(PNoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountInfo(ctx context.Context, in *PNoParam, opts ...client.CallOption) (*PUser, error) {
	req := c.c.NewRequest(c.serviceName, "Account.GetAccountInfo", in)
	out := new(PUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetUserInfo(ctx context.Context, in *PInt32, opts ...client.CallOption) (*PUser, error) {
	req := c.c.NewRequest(c.serviceName, "Account.GetUserInfo", in)
	out := new(PUser)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountHandler interface {
	// 发送验证码(包含各种验证码,对应codeType)
	SendSmsVerifyCode(context.Context, *PSmsData, *PNoResponse) error
	// 登陆(账号,手机号,qq,微信)
	Login(context.Context, *PLoginData, *PUserAndToken) error
	// 注册信息(账号密码)
	Reg(context.Context, *PRegData, *PUserAndToken) error
	// 绑定账号(账号,手机号,qq,微信)
	// -- 已经通过某种方式登陆
	Bind(context.Context, *PBindData, *PNoResponse) error
	// 账号解绑(仅支持解绑第三方qq,微信),对应ELoginType
	Unbind(context.Context, *PString, *PNoResponse) error
	// 设置账号名
	SetAccountName(context.Context, *PString, *PNoResponse) error
	// 修改密码(通过原始密码)
	ChangePassword(context.Context, *PString, *PNoResponse) error
	// 修改昵称
	ChangeNickname(context.Context, *PString, *PNoResponse) error
	// 修改手机号
	ChangePhone(context.Context, *PString, *PNoResponse) error
	// 设置密码(手机验证码登陆情况)
	SetPassword(context.Context, *PKeyValList, *PNoResponse) error
	// 重置密码(通过原始密码重置密码)
	ResetPassword(context.Context, *PKeyValList, *PNoResponse) error
	// 头像设置
	SetAvatar(context.Context, *PString, *PNoResponse) error
	// 修改资料
	SaveProfile(context.Context, *PKeyValList, *PNoResponse) error
	// 提交身份认证信息
	SubmitIdentity(context.Context, *PKeyValList, *PNoResponse) error
	// 获取账号信息(需验证登陆情况)
	GetAccountInfo(context.Context, *PNoParam, *PUser) error
	// 获取用户信息
	GetUserInfo(context.Context, *PInt32, *PUser) error
}

func RegisterAccountHandler(s server.Server, hdlr AccountHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Account{hdlr}, opts...))
}

type Account struct {
	AccountHandler
}

func (h *Account) SendSmsVerifyCode(ctx context.Context, in *PSmsData, out *PNoResponse) error {
	return h.AccountHandler.SendSmsVerifyCode(ctx, in, out)
}

func (h *Account) Login(ctx context.Context, in *PLoginData, out *PUserAndToken) error {
	return h.AccountHandler.Login(ctx, in, out)
}

func (h *Account) Reg(ctx context.Context, in *PRegData, out *PUserAndToken) error {
	return h.AccountHandler.Reg(ctx, in, out)
}

func (h *Account) Bind(ctx context.Context, in *PBindData, out *PNoResponse) error {
	return h.AccountHandler.Bind(ctx, in, out)
}

func (h *Account) Unbind(ctx context.Context, in *PString, out *PNoResponse) error {
	return h.AccountHandler.Unbind(ctx, in, out)
}

func (h *Account) SetAccountName(ctx context.Context, in *PString, out *PNoResponse) error {
	return h.AccountHandler.SetAccountName(ctx, in, out)
}

func (h *Account) ChangePassword(ctx context.Context, in *PString, out *PNoResponse) error {
	return h.AccountHandler.ChangePassword(ctx, in, out)
}

func (h *Account) ChangeNickname(ctx context.Context, in *PString, out *PNoResponse) error {
	return h.AccountHandler.ChangeNickname(ctx, in, out)
}

func (h *Account) ChangePhone(ctx context.Context, in *PString, out *PNoResponse) error {
	return h.AccountHandler.ChangePhone(ctx, in, out)
}

func (h *Account) SetPassword(ctx context.Context, in *PKeyValList, out *PNoResponse) error {
	return h.AccountHandler.SetPassword(ctx, in, out)
}

func (h *Account) ResetPassword(ctx context.Context, in *PKeyValList, out *PNoResponse) error {
	return h.AccountHandler.ResetPassword(ctx, in, out)
}

func (h *Account) SetAvatar(ctx context.Context, in *PString, out *PNoResponse) error {
	return h.AccountHandler.SetAvatar(ctx, in, out)
}

func (h *Account) SaveProfile(ctx context.Context, in *PKeyValList, out *PNoResponse) error {
	return h.AccountHandler.SaveProfile(ctx, in, out)
}

func (h *Account) SubmitIdentity(ctx context.Context, in *PKeyValList, out *PNoResponse) error {
	return h.AccountHandler.SubmitIdentity(ctx, in, out)
}

func (h *Account) GetAccountInfo(ctx context.Context, in *PNoParam, out *PUser) error {
	return h.AccountHandler.GetAccountInfo(ctx, in, out)
}

func (h *Account) GetUserInfo(ctx context.Context, in *PInt32, out *PUser) error {
	return h.AccountHandler.GetUserInfo(ctx, in, out)
}

func init() { proto.RegisterFile("proto/account.proto", fileDescriptor_account_919cef71916d18b0) }

var fileDescriptor_account_919cef71916d18b0 = []byte{
	// 1018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x56, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0xb6, 0xe5, 0x3f, 0x69, 0xdc, 0x28, 0x0a, 0xbb, 0x6d, 0xb5, 0x69, 0x81, 0x06, 0x2a, 0xb0,
	0x4d, 0x17, 0x85, 0xdb, 0x3a, 0xe8, 0xdf, 0x1e, 0x5a, 0xe4, 0x0f, 0x59, 0xa3, 0x0b, 0x5b, 0x91,
	0x93, 0xcd, 0xd1, 0x60, 0xa4, 0x89, 0x43, 0xc4, 0x16, 0x6d, 0x51, 0x49, 0x36, 0x97, 0x1e, 0xfb,
	0x16, 0x7d, 0x82, 0x9e, 0xfa, 0x4c, 0x7d, 0x91, 0x82, 0x43, 0xc9, 0x89, 0x17, 0x48, 0x90, 0xf4,
	0xd8, 0x93, 0xf9, 0xcd, 0x0c, 0x39, 0xc3, 0xef, 0x1b, 0x8e, 0x0c, 0x1f, 0xce, 0x32, 0x99, 0xcb,
	0x6f, 0x78, 0x1c, 0xcb, 0xcb, 0x34, 0xef, 0x10, 0x62, 0x0d, 0xfa, 0x59, 0xf7, 0x8c, 0xef, 0x94,
	0x2b, 0x34, 0x8e, 0xe0, 0x4f, 0x0b, 0x1a, 0xe1, 0xb1, 0xc2, 0x8c, 0xb9, 0x60, 0x89, 0xc4, 0xaf,
	0x6e, 0x54, 0x37, 0x1b, 0x91, 0x25, 0x12, 0xe6, 0x43, 0xab, 0x38, 0xc3, 0xb7, 0x36, 0xaa, 0x9b,
	0x4e, 0x54, 0x42, 0xc6, 0xa0, 0x9e, 0xf2, 0x29, 0xfa, 0x35, 0x32, 0xd3, 0x9a, 0x3d, 0x83, 0xc6,
	0xec, 0x5c, 0xa6, 0xe8, 0xd7, 0xc9, 0x68, 0x80, 0xb6, 0xe2, 0x94, 0x8b, 0x89, 0xdf, 0x30, 0x56,
	0x02, 0xec, 0x63, 0x68, 0x8e, 0x31, 0x4d, 0x30, 0xf3, 0x9b, 0x94, 0xad, 0x40, 0xec, 0x53, 0x70,
	0x54, 0x7c, 0x2e, 0xe5, 0x64, 0x24, 0x12, 0xbf, 0x45, 0x2e, 0xdb, 0x18, 0x7a, 0x09, 0x7b, 0x0e,
	0x76, 0x3c, 0xe1, 0x4a, 0x69, 0x9f, 0x4d, 0xbe, 0x16, 0xe1, 0x5e, 0xc2, 0x3e, 0x81, 0x16, 0xcf,
	0x90, 0x6b, 0x8f, 0x63, 0x0e, 0xd4, 0xb0, 0x97, 0xb0, 0x2f, 0x61, 0x55, 0x24, 0x98, 0xe6, 0x22,
	0xbf, 0x19, 0xa9, 0x9c, 0xe7, 0x97, 0xca, 0x07, 0x0a, 0x70, 0x4b, 0xf3, 0x90, 0xac, 0xfa, 0xae,
	0x71, 0x86, 0x3c, 0xc7, 0xc4, 0x6f, 0x17, 0x67, 0x1b, 0x18, 0x4c, 0xa0, 0x15, 0xee, 0xe1, 0x95,
	0x88, 0x51, 0x5f, 0x5b, 0x4c, 0x51, 0x10, 0x45, 0x4e, 0x44, 0x6b, 0xf6, 0x1c, 0x2c, 0xa9, 0x88,
	0x1f, 0xb7, 0xeb, 0x18, 0x4a, 0x3b, 0x03, 0x15, 0x59, 0x52, 0xb1, 0xcf, 0xc0, 0x91, 0xea, 0x2d,
	0x66, 0x4a, 0xc8, 0xb4, 0xa0, 0xea, 0xd6, 0xa0, 0x99, 0x99, 0xca, 0x04, 0x27, 0x25, 0x5f, 0x04,
	0x82, 0xbf, 0x2d, 0x80, 0xf0, 0x8d, 0x1c, 0x8b, 0x74, 0x8f, 0xe7, 0x9c, 0x7d, 0x0b, 0x30, 0xd1,
	0x60, 0x94, 0xdf, 0xcc, 0x90, 0xf2, 0xba, 0xdd, 0xb5, 0x22, 0xcb, 0x3e, 0x85, 0x1d, 0xdd, 0xcc,
	0x30, 0x72, 0x26, 0xe5, 0x92, 0xbd, 0x80, 0x66, 0x42, 0xd5, 0x52, 0x4d, 0xed, 0xae, 0x5b, 0x44,
	0x17, 0x77, 0x88, 0x0a, 0xef, 0xad, 0x5c, 0xb5, 0xbb, 0x72, 0x7d, 0x0e, 0xed, 0x2b, 0xcc, 0xc4,
	0xd9, 0xcd, 0x28, 0x96, 0x49, 0x29, 0x25, 0x18, 0xd3, 0xae, 0x4c, 0xf0, 0x6e, 0x4f, 0x34, 0x96,
	0x7b, 0x62, 0x1d, 0xec, 0x19, 0x57, 0xea, 0x5a, 0x66, 0x09, 0xa9, 0xea, 0x44, 0x0b, 0xac, 0x75,
	0x9d, 0xcf, 0x47, 0x72, 0x86, 0x69, 0xa1, 0x9d, 0x13, 0xd9, 0xf3, 0xf9, 0x80, 0x30, 0x7b, 0x01,
	0xab, 0xf3, 0xf9, 0x88, 0xc7, 0x31, 0x2a, 0x35, 0xca, 0xe5, 0x05, 0xa6, 0x24, 0xa2, 0x13, 0xad,
	0xcc, 0xe7, 0xdb, 0x64, 0x3d, 0xd2, 0x46, 0x2d, 0xf2, 0xf5, 0x3b, 0x53, 0x17, 0x90, 0xbf, 0x79,
	0xfd, 0x4e, 0xd7, 0x14, 0x1c, 0xc0, 0x0a, 0x35, 0xf0, 0x76, 0x9a, 0x98, 0xc8, 0x0d, 0xa8, 0x5f,
	0x2a, 0xcc, 0x88, 0xaf, 0x76, 0xf7, 0x83, 0x92, 0x01, 0x1d, 0x13, 0x91, 0x47, 0xdf, 0xde, 0x64,
	0x32, 0x8d, 0x6d, 0x40, 0x70, 0x0d, 0x76, 0x18, 0xe1, 0x98, 0x98, 0x5f, 0xf0, 0x53, 0x7d, 0x80,
	0x1f, 0xeb, 0x21, 0x7e, 0x6a, 0xf7, 0xf3, 0x53, 0x5f, 0xe6, 0x27, 0xf8, 0xc3, 0x02, 0x27, 0xdc,
	0x11, 0x69, 0x42, 0xa9, 0x3b, 0xe0, 0x9c, 0x8a, 0x34, 0x31, 0x9a, 0x5b, 0xf7, 0x69, 0x6e, 0xeb,
	0x18, 0x92, 0xfc, 0x7f, 0x24, 0xe5, 0xef, 0xe0, 0x9a, 0xee, 0xd7, 0x64, 0xf4, 0xd2, 0x33, 0xa9,
	0xab, 0xdc, 0x2e, 0xaa, 0x34, 0x4a, 0x94, 0x50, 0x5f, 0x3b, 0xa4, 0x6b, 0x17, 0x1a, 0x12, 0xd0,
	0xa3, 0xe5, 0x04, 0xe3, 0x73, 0x6e, 0xf8, 0xb7, 0xa3, 0x02, 0xe9, 0xe1, 0x76, 0x78, 0x48, 0x2c,
	0xd8, 0x91, 0x75, 0x78, 0xa8, 0x77, 0x9f, 0xa0, 0xd8, 0x91, 0x74, 0x77, 0x3b, 0x32, 0x20, 0xf8,
	0x15, 0xd8, 0x72, 0xfe, 0x37, 0x42, 0xe5, 0xec, 0x2b, 0xa8, 0xeb, 0x5f, 0xbf, 0xba, 0x51, 0xdb,
	0x6c, 0x77, 0x3f, 0x2a, 0xfb, 0x69, 0x29, 0x30, 0xa2, 0x90, 0xe0, 0xaf, 0x2a, 0xd8, 0xe1, 0x70,
	0xaa, 0x1e, 0xe8, 0xa1, 0x72, 0x8a, 0x58, 0x77, 0xa6, 0xc8, 0xf7, 0xe0, 0x68, 0x36, 0x8c, 0xe4,
	0x35, 0x92, 0xdc, 0x2f, 0xd3, 0x14, 0xa7, 0x75, 0x74, 0x80, 0x51, 0xbe, 0x5c, 0x05, 0xbf, 0xc0,
	0x62, 0xcd, 0x56, 0xa1, 0x3d, 0xbf, 0x14, 0xf1, 0xc5, 0x88, 0x66, 0x81, 0x57, 0x61, 0x2e, 0x40,
	0x86, 0x0a, 0xf3, 0x91, 0xd6, 0xce, 0xb3, 0x58, 0x0b, 0x6a, 0x19, 0x8e, 0xbd, 0x2a, 0xb3, 0xa1,
	0xae, 0x7b, 0xc7, 0xab, 0xbd, 0xfc, 0x09, 0xe0, 0xb6, 0xa3, 0x58, 0x1b, 0x5a, 0xdb, 0xbb, 0xbb,
	0x83, 0xe3, 0xfe, 0x91, 0x57, 0x61, 0x0e, 0x34, 0xc2, 0xd7, 0x83, 0xfe, 0xbe, 0x57, 0x65, 0x00,
	0xcd, 0x93, 0xfd, 0xdd, 0xd7, 0xdb, 0x47, 0x9e, 0xc5, 0x9a, 0x9a, 0x46, 0xaf, 0xf6, 0xf2, 0x0b,
	0xb0, 0x06, 0x8a, 0x76, 0xf4, 0xf7, 0xa2, 0x41, 0x6f, 0xcf, 0xab, 0xe8, 0xf3, 0x7b, 0x83, 0xa1,
	0x57, 0xd5, 0x8b, 0x93, 0xfd, 0x1d, 0xcf, 0xea, 0xfe, 0xd3, 0x5c, 0x88, 0xc7, 0x5e, 0xc1, 0xda,
	0x10, 0xd3, 0x64, 0x38, 0xd5, 0x03, 0xb0, 0x6c, 0xc1, 0xd5, 0xf7, 0xee, 0xb8, 0xce, 0x4a, 0x43,
	0x5f, 0x46, 0xa8, 0x66, 0x32, 0x55, 0x18, 0x54, 0x58, 0x17, 0x1a, 0x54, 0x25, 0x5b, 0x5b, 0xa2,
	0x9e, 0x76, 0x3c, 0xbb, 0xfb, 0xba, 0xcb, 0x09, 0x10, 0x54, 0x58, 0x07, 0x6a, 0x11, 0x8e, 0x6f,
	0x33, 0x14, 0xef, 0xfa, 0x81, 0xf8, 0xba, 0x96, 0x92, 0x79, 0xa5, 0xbf, 0x7c, 0x8e, 0xf7, 0xd4,
	0xd4, 0x81, 0xe6, 0x71, 0xaa, 0x69, 0x64, 0x8b, 0x09, 0x3b, 0xcc, 0x33, 0x91, 0x8e, 0xef, 0x89,
	0xff, 0x01, 0xdc, 0x21, 0xe6, 0x05, 0x1b, 0x7d, 0xfd, 0xc1, 0x7c, 0xf4, 0xbe, 0xdd, 0x73, 0x9e,
	0x8e, 0x31, 0x2c, 0x5f, 0xe0, 0x13, 0xf7, 0xf5, 0x45, 0x7c, 0x91, 0x3e, 0x3e, 0xdf, 0x16, 0xb4,
	0x8b, 0x7c, 0xd4, 0xac, 0x8f, 0xdb, 0xf4, 0x23, 0xb4, 0x87, 0x98, 0x2f, 0x2a, 0x5c, 0x04, 0xfd,
	0x86, 0x37, 0x6f, 0xf9, 0x44, 0x3f, 0x8c, 0x7b, 0x36, 0xfe, 0x0c, 0x2b, 0x91, 0xee, 0xd1, 0xff,
	0xb0, 0xf5, 0x3b, 0x70, 0x34, 0xa1, 0x57, 0x3c, 0xe7, 0xd9, 0x13, 0xca, 0xe4, 0x57, 0x18, 0x66,
	0xf2, 0x4c, 0x4c, 0xf0, 0x09, 0xb9, 0x5e, 0x81, 0x3b, 0xbc, 0x3c, 0x9d, 0x8a, 0xbc, 0x57, 0xfc,
	0x6b, 0x78, 0x52, 0x9d, 0xee, 0xc1, 0x42, 0x78, 0x1a, 0x69, 0xab, 0xb7, 0x71, 0x21, 0xcf, 0xf8,
	0x74, 0x7d, 0xe9, 0x0b, 0x15, 0x54, 0xd8, 0xd7, 0xd0, 0x3e, 0xc0, 0x5c, 0x03, 0x8a, 0x5f, 0x29,
	0xdd, 0xbd, 0x34, 0xdf, 0xea, 0xbe, 0x1f, 0x7d, 0xda, 0x24, 0xb8, 0xf5, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x02, 0x6d, 0x36, 0x34, 0xf7, 0x09, 0x00, 0x00,
}
